OPTIONS /*path                        com.assessory.play.controllers.Application.options(path)


# WebJars
GET     /webjars/*file                    controllers.WebJarAssets.at(file)
GET     /vassets/*file                    controllers.Assets.versioned(path="/public", file: Asset)


# Task Output
GET     /api/taskoutput/:toId                           com.assessory.play.controllers.TaskOutputController.get(toId)
POST    /api/taskoutput/:toId                           com.assessory.play.controllers.TaskOutputController.updateBody(toId)
POST    /api/task/:taskId/newOutput                     com.assessory.play.controllers.TaskOutputController.create(taskId)
GET     /api/task/:taskId/myOutputs                     com.assessory.play.controllers.TaskOutputController.myOutputs(taskId)

# Critiques
GET     /api/critique/:id/myAllocations           com.assessory.play.controllers.CritController.myAllocations(id)

# Tasks
GET     /api/task/:id                              com.assessory.play.controllers.TaskController.get(id)
POST    /api/course/:courseId/task/create          com.assessory.play.controllers.TaskController.create(courseId)
GET     /api/course/:courseId/tasks                com.assessory.play.controllers.TaskController.courseTasks(courseId)
POST    /api/task/:id/body                         com.assessory.play.controllers.TaskController.updateBody(id)

# Users
POST    /api/user/findMany                        com.assessory.play.controllers.UserController.findMany

# Groups
POST    /api/course/:courseId/group/my          com.assessory.play.controllers.GroupController.myGroups(courseId)
POST    /api/groupSet/:gsId/groups              com.assessory.play.controllers.GroupController.groupSetGroups(gsId)
POST    /api/group/findMany                     com.assessory.play.controllers.GroupController.findMany
GET     /api/group/:id                          com.assessory.play.controllers.GroupController.group(id)

# GroupSets
GET     /api/course/:courseId/groupSets           com.assessory.play.controllers.GroupController.courseGroupSets(courseId)
GET     /api/groupSet/:gsId                       com.assessory.play.controllers.GroupController.groupSet(gsId)
POST    /api/groupSet/:gsId                       com.assessory.play.controllers.GroupController.editGroupSet(gsId)
POST    /api/course/:courseId/createGroupSet      com.assessory.play.controllers.GroupController.createGroupSet(courseId)

# Courses
POST    /api/course/my                  com.assessory.play.controllers.CourseController.myCourses
GET     /api/course/:id                 com.assessory.play.controllers.CourseController.get(id:Id[Course,String])
POST    /api/course/create              com.assessory.play.controllers.CourseController.create
POST    /api/course/findMany            com.assessory.play.controllers.CourseController.findMany
GET     /api/course/:id/autolinks       com.assessory.play.controllers.CourseController.autolinks(id:Id[Course,String])

# Logged in user
POST	  /api/self						com.assessory.play.controllers.UserController.self

POST	  /api/signUp						com.assessory.play.controllers.UserController.signUp
POST	  /api/logIn 						com.assessory.play.controllers.UserController.logIn
POST	  /api/logOut						com.assessory.play.controllers.UserController.logOut

GET     /auto/:user/:secret         com.assessory.play.controllers.UserController.autologin(user:Id[User,String], secret)

# Auth
->      /oauth                  handyplayoauth.Routes
POST    /auth/interstitial/register com.assessory.auth.controllers.InterstitialController.registerUser
POST    /auth/interstitial/add      com.assessory.auth.controllers.InterstitialController.addIdentity

# Index
GET     /                           com.assessory.play.controllers.Application.index
GET     /client                     com.assessory.play.controllers.Application.index

# Test error conditions
GET     /notFound                   com.assessory.play.controllers.Application.notFound
GET     /userError                  com.assessory.play.controllers.Application.userError

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

# Default route
GET    /course/*path                      com.assessory.play.controllers.Application.defaultRoute(path)
